#
# Copyright (C) 2006-2017 Talend Inc. - www.talend.com
#
# This source code is available under agreement available at
# https://github.com/Talend/data-prep/blob/master/LICENSE
#
# You should have received a copy of the agreement
# along with this program; if not, write to Talend SA
# 9 rue Pages 92150 Suresnes, France
#


choice.hours=FrenchyHours
choice.days=FrenchyDays
choice.months=FrenchyMonths
choice.years=FrenchyYears

choice.tab=Frenchytab

choice.semiColon=FrenchySemicolon
choice.tabulation=FrenchyTab
choice.space=FrenchySpace
choice.comma=FrenchyComma
choice.pipe=FrenchyPipe
choice.dot=FrenchyDot
choice.quote=FrenchyQuote
choice.none=FrenchyNone

choice.CSV=FrenchyCSV
choice.AVRO=FrenchyAVRO
choice.PARQUET=FrenchyPARQUET

parameter.format.desc=FrenchyFormat
parameter.format.label=FrenchyFormat

parameter.path.desc=FrenchyOutput path
parameter.path.label=FrenchyOutput path

parameter.username.desc=FrenchyUser name
parameter.username.label=FrenchyUser name

parameter.customKeyTab.desc=FrenchyKeytab
parameter.customKeyTab.label=FrenchyKeytab

parameter.useKerberos.desc=FrenchyUse Kerberos
parameter.useKerberos.label=FrenchyUse Kerberos

parameter.access_key.desc=FrenchyAccess key
parameter.access_key.label=FrenchyAccess key

parameter.secret_key.desc=FrenchySecret key
parameter.secret_key.label=FrenchySecret key

parameter.s3_bucket.desc=FrenchyBucket
parameter.s3_bucket.label=FrenchyBucket

parameter.s3_object.desc=FrenchyObject
parameter.s3_object.label=FrenchyObject

parameter.region.desc=FrenchyRegion
parameter.region.label=FrenchyRegion

parameter.customRegion.desc=FrenchyYour custom region
parameter.customRegion.label=FrenchyYour custom region

choice.customRegion=FrenchyCustom region

parameter.s3_encrypt_data_at_rest.label=FrenchyEncrypt data at rest
parameter.s3_encrypt_data_at_rest.desc=FrenchyEncrypt data at rest

parameter.s3_encrypt_data_in_motion.label=FrenchyEncrypt data in motion
parameter.s3_encrypt_data_in_motion.desc=FrenchyEncrypt data in motion

parameter.s3_kms_for_data_at_rest.label=FrenchyKMS customer master key
parameter.s3_kms_for_data_at_rest.desc=FrenchyKMS customer master key for data at rest

parameter.s3_kms_for_data_in_motion.label=FrenchyKMS customer master key
parameter.s3_kms_for_data_in_motion.desc=FrenchyKMS customer master key for data in motion

parameter.csv_records_delimiter.desc=FrenchyRecord delimiter
parameter.csv_records_delimiter.label=FrenchyRecord delimiter

parameter.custom_csv_records_delimiter.desc=FrenchySpecific record delimiter
parameter.custom_csv_records_delimiter.label=FrenchySpecific record delimiter

choice.custom_csv_records_delimiter=FrenchyOther

parameter.custom_csv_fields_delimiter.desc=FrenchyCharacter to use as a delimiter
parameter.custom_csv_fields_delimiter.label=FrenchyCharacter to use as a delimiter

choice.custom_csv_fields_delimiter=FrenchyOther
choice.LF=FrenchyLF
choice.CR=FrenchyCR
choice.CRLF=FrenchyCRLF

choice.AP_SOUTH_1=FrenchyAsia Pacific (Mumbai)
choice.AP_SOUTHEAST_1=FrenchyAsia Pacific (Singapore)
choice.AP_SOUTHEAST_2=FrenchyAsia Pacific (Sydney)
choice.AP_NORTHEAST_1=FrenchyAsia Pacific (Tokyo)
choice.AP_NORTHEAST_2=FrenchyAsia Pacific (Seoul)
choice.CN_NORTH_1=FrenchyChina (Beijing)
choice.EU_WEST_1=FrenchyEU (Ireland)
choice.EU_WEST_2=FrenchyEU (London)
choice.EU_CENTRAL_1=FrenchyEU (Frankfurt)
choice.GovCloud=FrenchyAWS GovCloud (US)
choice.CA_CENTRAL_1=FrenchyCanada (Central)
choice.SA_EAST_1=FrenchySouth America (Sao Paulo)
choice.US_EAST_1=FrenchyUS Standard
choice.US_EAST_2=FrenchyUS EAST (Ohio)
choice.US_WEST_1=FrenchyUS West (N. California)
choice.US_WEST_2=FrenchyUS West (Oregon)

parameter.field.delimiter.desc=FrenchyField delimiter
parameter.field.delimiter.label=FrenchyField delimiter

parameter.record.delimiter.desc=FrenchyRow delimiter
parameter.record.delimiter.label=FrenchyRow delimiter
parameter.principal.desc=FrenchySpecify the principal
parameter.principal.label=FrenchyPrincipal
parameter.authentication.desc=FrenchyChoose the authentication method
parameter.authentication.label=FrenchyAuthentication method

parameter.name.desc=FrenchyName
parameter.name.label=FrenchyDataset name

parameter.url.desc=FrenchyURL
parameter.url.label=FrenchyEnter the dataset URL
parameter.jobId.desc=FrenchyTalend job
parameter.jobId.label=FrenchyTalend job

parameter.datasetFile.desc=FrenchyFile
parameter.datasetFile.label=FrenchyFile

parameter.csv_fields_delimiter.desc=FrenchySelect character to use as a delimiter
parameter.csv_fields_delimiter.label=FrenchyDelimiter

parameter.fileName.desc=FrenchyName of the generated export file
parameter.fileName.label=FrenchyFilename

parameter.semiColon.label=FrenchySemicolon
parameter.tabulation.label=FrenchyTab
parameter.space.label=FrenchySpace
parameter.comma.label=FrenchyComma
parameter.pipe.label=FrenchyPipe

parameter.user.label=FrenchyUser
parameter.user.desc=FrenchyTAC user used to run job

parameter.password.label=FrenchyPassword
parameter.password.desc=FrenchyTAC user password

#
#implicit parameters
#
parameter.scope.label=FrenchyScope
parameter.scope.desc=FrenchyThe transformation scope (CELL | ROW | COLUMN | DATASET)

parameter.row_id.label=FrenchyRow
parameter.row_id.desc=FrenchyThe row to which you want to apply this action

parameter.column_id.label=FrenchyColumn
parameter.column_id.desc=FrenchyThe column to which you want to apply this action

parameter.column_name.label=FrenchyColumn name
parameter.column_name.desc=FrenchyThe column name to which you want to apply this action

parameter.filter.label=FrenchyFilter
parameter.filter.desc=FrenchyAn optional filter to apply action on matching values only.

#
#transformations
#
action.absolute.label=FrenchyCalculate absolute value
action.absolute.desc=FrenchyCalculate the absolute value for all the numeric values in this column.

action.cut.label=FrenchyRemove part of the text
action.cut.desc=FrenchyRemove specified text from cells in this column

action.fillemptywithdefault.label=FrenchyFill empty cells with text
action.fillemptywithdefault.desc=FrenchyFill empty cells from this column with a given value

action.fillemptywithdefaultboolean.label=FrenchyFill empty cells with value
action.fillemptywithdefaultboolean.desc=FrenchyFill empty cells from this column with a given value

action.fillemptywithdefaultinteger.label=FrenchyFill empty cells with value
action.fillemptywithdefaultinteger.desc=FrenchyFill empty cells from this column with a given value

action.fillemptywithdefaultdate.label=FrenchyFill empty cells with value
action.fillemptywithdefaultdate.desc=FrenchyFill empty cells from this column with a given value

action.fillinvalidwithdefaultboolean.label=FrenchyFill invalid cells with value
action.fillinvalidwithdefaultboolean.desc=FrenchyFill invalid cells from this column with a given value

action.fillinvalidwithdefaultnumeric.label=FrenchyFill invalid cells with value
action.fillinvalidwithdefaultnumeric.desc=FrenchyFill invalid cells from this column with a given value

action.fillinvalidwithdefaultdate.label=FrenchyFill invalid cells with value
action.fillinvalidwithdefaultdate.desc=FrenchyFill invalid cells from this column with a given value

action.fillinvalidwithdefault.label=FrenchyFill invalid cells with value
action.fillinvalidwithdefault.desc=FrenchyFill invalid cells from this column with a given value

action.fill_with_value.label=FrenchyFill cells with value
action.fill_with_value.desc=FrenchyFill cells from this column with a given value

action.lowercase.label=FrenchyChange to lower case
action.lowercase.desc=FrenchyConverts all of the cell text in this column to lower case

action.uppercase.label=FrenchyChange to upper case
action.uppercase.desc=FrenchyConverts all of the cell text in this column to UPPER case (capitalize)

action.propercase.label=FrenchyChange to title case
action.propercase.desc=FrenchyConverts the text content from this column to title case (i.e. "data prep" -> "Data Prep")

action.negate.label=FrenchyNegate value
action.negate.desc=FrenchyReverse the boolean value of cells from this column

action.delete_empty.label=FrenchyDelete the rows with empty cell
action.delete_empty.desc=FrenchyDelete rows that have empty cells

action.delete_on_value.label=FrenchyDelete the rows that match
action.delete_on_value.desc=FrenchyDelete rows where a cell in this column has a specific value
action.delete_on_value.url_parameters=Frenchyfunc&pageid=Frenchyregular_expressions

action.delete_invalid.label=FrenchyDelete the rows with invalid cell
action.delete_invalid.desc=FrenchyDelete rows which contain an invalid cell

action.clear_invalid.label=FrenchyClear the cells with invalid values
action.clear_invalid.desc=FrenchyClear cells that contain a value recognized as invalid

#
# Clear action
#
action.clear_matching.label=FrenchyClear on matching value
action.clear_matching.desc=FrenchyClear cells that match the value
action.clear_matching.url_parameters=Frenchyfunc&pageid=Frenchyregular_expressions

parameter.matching_value.label=FrenchyValue
parameter.matching_value.desc=FrenchyThe value to compare with

action.trim.label=FrenchyRemove trailing and leading characters
action.trim.desc=FrenchyRemove trailing and leading characters (i.e. trim)

action.round.label=FrenchyRound value using halfup mode
action.round.desc=FrenchyRound value to the closest integer (3.14 -> 3)

action.floor.label=FrenchyRound value using floor mode
action.floor.desc=FrenchyRound value to the largest integer (3.14 -> 4)

action.ceil.label=FrenchyRound value using ceil mode
action.ceil.desc=FrenchyRound value to the smallest integer (3.74 -> 3)

action.round_down.label=FrenchyRemove fractional part
action.round_down.desc=FrenchyRound towards zero. (3.74 -> 3) and (-3.74 -> -3)

action.round_down_real.label=FrenchyRound value using down mode
action.round_down_real.desc=FrenchyRound towards zero. (3.74 -> 3) and (-3.74 -> -3)

parameter.precision.label=FrenchyPrecision
parameter.precision.desc=FrenchyNumber of digits to add after decimal symbol

action.textclustering.label=FrenchyFind and group similar text
action.textclustering.desc=FrenchyReplace all similar values with the right one (i.e. cluster on fuzzy matching)

action.domain_change.label=FrenchyChange semantic domain
action.domain_change.desc=FrenchyChange semantic domain of this column (city, zipcode, last name, etc.)

action.type_change.label=FrenchyChange data type
action.type_change.desc=FrenchyChange type of this column (number, text, date, etc.)

action.delete_lines.label=FrenchyDelete these filtered rows
action.delete_lines.desc=FrenchyDelete only the rows that match the current filters

action.keep_only.label=FrenchyKeep these filtered rows
action.keep_only.desc=FrenchyKeep only the rows that match the current filters

parameter.textclustering.title.1=FrenchyThese values have been found
parameter.textclustering.title.2=FrenchyThis value will be kept

parameter.pattern.label=FrenchyPattern
parameter.pattern.desc=FrenchyThe pattern to cut in this column

parameter.default_value.label=FrenchyValue
parameter.default_value.desc=FrenchyThe value to set in cells

parameter.value.label=FrenchyValue
parameter.value.desc=FrenchyThe value to search

parameter.replaceValue.label=FrenchyReplace value
parameter.replaceValue.desc=FrenchyReplace value

#
# Replace on value action
#
action.replace_on_value.label=FrenchySearch and replace
action.replace_on_value.desc=FrenchyReplace cells or parts of cells which contain a specific value
action.replace_on_value.url_parameters=Frenchyfunc&pageid=Frenchyregular_expressions


parameter.cell_value.label=FrenchySearch for
parameter.cell_value.desc=FrenchyThe current value

parameter.replace_value.label=FrenchyReplace with
parameter.replace_value.desc=FrenchyThe new value to set

parameter.replace_entire_cell.label=FrenchyOverwrite entire cell
parameter.replace_entire_cell.desc=FrenchyDefines greedy level. If checked, it will overwrite the entire cell, if not, it will only replace the part of the value that matches.
#
# Replace cell value action
#
action.replace_cell_value.label=FrenchyReplace value
action.replace_cell_value.desc=FrenchyReplace value
parameter.original_value.label=FrenchyCurrent
parameter.original_value.desc=FrenchyThe current cell value
parameter.new_value.label=FrenchyReplacement
parameter.new_value.desc=FrenchyThe new value to set

#
# rename action
#
action.rename_column.label=FrenchyRename column
action.rename_column.desc=FrenchyRename this column

parameter.new_column_name.label=FrenchyNew name
parameter.new_column_name.desc=FrenchyThe new column name

#
# split action
#
action.split.label=FrenchySplit the text in parts
action.split.desc=FrenchySplit the value in multiple columns based on the number of separators

parameter.separator.label=FrenchySeparator
parameter.separator.desc=FrenchyCharacter, litteral or regex to use as separator

parameter.manual_separator_string.label=FrenchyManual separator
parameter.manual_separator_string.desc=FrenchyChoose your own separator

parameter.manual_separator_regex.label=FrenchyManual separator
parameter.manual_separator_regex.desc=FrenchyChoose your own separator

parameter.limit.label=FrenchyParts
parameter.limit.desc=FrenchyNumber of parts to split the value in

choice.custom=Frenchyother

#
# extract email domain action
#
action.extractemaildomain.label=FrenchyExtract email parts
action.extractemaildomain.desc=FrenchyExtract local and domain parts from an email address

#
# Duplicate column action
#
action.copy.label=FrenchyDuplicate column
action.copy.desc=FrenchyCreate an exact copy of this column

#
# change date pattern action
#
action.change_date_pattern.label=FrenchyChange date format
action.change_date_pattern.desc=FrenchyChange the date format to use in a date column
action.change_date_pattern.url_parameters=Frenchyfunc&pageid=Frenchydate_formats

parameter.from_pattern_mode.label=FrenchyCurrent format
parameter.from_pattern_mode.desc=FrenchySelect your current date format

choice.from_custom_mode=FrenchyDefine my own format

parameter.from_custom_pattern.label=FrenchyYour format
parameter.from_custom_pattern.desc=Frenchye.g. dd/MM/yyyy for day/month/year

parameter.new_pattern.label=FrenchyNew format
parameter.new_pattern.desc=FrenchyChoose the date format to use in the list or make your own

parameter.custom_date_pattern.label=FrenchyYour format
parameter.custom_date_pattern.desc=Frenchye.g. dd/MM/yyyy for day/month/year

#
# Extract date tokens action
#
action.extract_date_tokens.label=FrenchyExtract date parts
action.extract_date_tokens.desc=FrenchyCreate columns with year, month, day, hour, minute, second, etc.

parameter.YEAR.label=FrenchyYear
parameter.YEAR.desc=FrenchyExtract year from date (24/08/2015 -> 2015)

parameter.MONTH.label=FrenchyMonth of year
parameter.MONTH.desc=FrenchyExtract month of year from date (24/08/2015 -> 8)

parameter.DAY.label=FrenchyDay of month
parameter.DAY.desc=FrenchyExtract day of month from date (24/08/2015 -> 24)

parameter.HOUR_12.label=FrenchyHour of am-pm
parameter.HOUR_12.desc=FrenchyExtract the hour of the day (from an AM/PM format), from 0 to 11

parameter.AM_PM.label=FrenchyThe am-pm of the day
parameter.AM_PM.desc=FrenchyExtract the AM/PM information of the day, from 0 (AM) to 1 (PM)

parameter.HOUR_24.label=FrenchyHour of the day
parameter.HOUR_24.desc=FrenchyExtract the hour of the day, from 0 to 23

parameter.MINUTE.label=FrenchyMinute
parameter.MINUTE.desc=FrenchyExtract minute from hour

parameter.SECOND.label=FrenchySecond
parameter.SECOND.desc=FrenchyExtract second from minute

parameter.DAY_OF_WEEK.label=FrenchyDay of the week
parameter.DAY_OF_WEEK.desc=FrenchyExtract the day of week, (1, 2, ... , 7)

parameter.DAY_OF_YEAR.label=FrenchyDay of the year
parameter.DAY_OF_YEAR.desc=FrenchyExtract the day of year. This has values from 1 to 365 in standard years and 1 to 366 in leap years

parameter.WEEK_OF_YEAR.label=FrenchyWeek of the year
parameter.WEEK_OF_YEAR.desc=FrenchyExtract the week number of the year

#
# Substring action
#
action.substring.label=FrenchyExtract parts of the text
action.substring.desc=FrenchyExtract some parts of the text (substring) and create a new column

parameter.from_mode.label=FrenchyFrom
parameter.from_mode.desc=FrenchySelect beginning mode of the substring

parameter.from_index.label=FrenchyBeginning index
parameter.from_index.desc=FrenchyIndex of the original value that starts the new one

parameter.from_n_before_end.label=FrenchyFrom N before end
parameter.from_n_before_end.desc=FrenchyEnter 5 if you want to start 5 characters before end (usefull to keep only last N characters)

parameter.to_mode.label=FrenchyTo
parameter.to_mode.desc=FrenchySelect end mode of the substring

parameter.to_index.label=FrenchyEnd index
parameter.to_index.desc=FrenchyIndex of the original value that ends the new one

parameter.to_n_before_end.label=FrenchyTo N before end
parameter.to_n_before_end.desc=FrenchyEnter 2 if you want to end 2 characters before end

choice.from_beginning=FrenchyFrom beginning
choice.from_index=FrenchyFrom index
choice.from_n_before_end=FrenchyFrom N before end
choice.to_end=FrenchyTo end
choice.to_index=FrenchyTo index
choice.to_n_before_end=FrenchyTo N before end

#
# Calculate length action
#
action.compute_length.label=FrenchyCalculate length
action.compute_length.desc=FrenchyExtract the number of digits from a value (23562 -> 5)

#
# Calculate time since action
#
action.compute_time_since.label=FrenchyCalculate time until
action.compute_time_since.desc=FrenchyCalculate elapsed time until a date, in the desired unit (year, month, day, hour)

parameter.time_unit.label=FrenchyTime unit
parameter.time_unit.desc=FrenchyThe unit in which you want the result

parameter.since_when.label=FrenchyUntil
parameter.since_when.desc=FrenchySpecify the date to compare to

parameter.specific_date.label=FrenchyThis date
parameter.specific_date.desc=FrenchySet here the date to compare to

choice.now_server_side=FrenchyNow
choice.specific_date=FrenchySpecific date

choice.YEARS=FrenchyYears
choice.MONTHS=FrenchyMonths
choice.DAYS=FrenchyDays
choice.HOURS=FrenchyHours

#
# Extract url tokens
#
action.extract_url_tokens.label=FrenchyExtract URL parts
action.extract_url_tokens.desc=FrenchyExtract protocol, host, port, query, etc. from an URL in separated columns

#
# Extract string tokens
#
action.extract_string_tokens.label=FrenchyExtract string parts
action.extract_string_tokens.desc=FrenchyExtract string tokens based on regex groups
action.extract_string_tokens.url_parameters=Frenchyfunc&pageid=Frenchyregular_expressions

parameter.regex.label=FrenchyRegex
parameter.regex.desc=FrenchyRegex used to extract groups (#(\w+) for hashtags)

parameter.extract_mode.label=FrenchyExtract to
parameter.extract_mode.desc=FrenchyDefine if each token will be in a dedicated columns or all combined in a single one
choice.multiple_columns=FrenchyMultiple columns
choice.single_column=FrenchyA single column

#
# Calculate timestamp to date
#
action.timestamp_to_date.label=FrenchyCalculate timestamp to date
action.timestamp_to_date.desc=FrenchyGiven a timestamp (ellapsed time since epoch in second), create a new column with the date
action.timestamp_to_date.url_parameters=Frenchyfunc&pageid=Frenchydate_formats

#
# Remove non numeric chars
#
action.remove_non_num_chars.label=FrenchyRemove all non numeric characters
action.remove_non_num_chars.desc=FrenchyFor example \u00E2\u201A\u00AC10.5k will become 10.5

#
# Remove non alpha-numeric chars
#
action.remove_non_alpha_num_chars.label=FrenchyRemove all non alpha numeric characters
action.remove_non_alpha_num_chars.desc=FrenchyFor example \u00E2\u201A\u00AC10.5k will become 105


#
# Normalize
#
action.normalize.label=FrenchySimplify text (remove case, accent, etc.)
action.normalize.desc=FrenchySimplify the content of this column (ie: Fran\u00C3\u00A7ois -> francois)

#
# Concat
#
action.concat.label=FrenchyConcatenate with
action.concat.desc=FrenchyJoin this column with another one

parameter.selected_column.label=FrenchyColumn
parameter.selected_column.desc=FrenchyCombine the current column with this one

parameter.prefix.label=FrenchyPrefix
parameter.prefix.desc=FrenchyOptional new column prefix

parameter.concat_separator.label=FrenchySeparator
parameter.concat_separator.desc=FrenchyString to use to separate values

parameter.suffix.label=FrenchySuffix
parameter.suffix.desc=FrenchyOptional new column suffix

choice.other_column_mode=FrenchyOther column
choice.constant_mode=FrenchyValue

parameter.concat_separator_condition.label=FrenchyAdd separator
parameter.concat_separator_condition.desc=FrenchyCondition for adding separator
choice.concat_both_not_empty=FrenchyBoth values not empty
choice.concat_always=FrenchyAlways

#
# matches pattern action
#
action.matches_pattern.label=FrenchyMatches pattern
action.matches_pattern.desc=FrenchyCreate a new column with <i>true</i> or <i>false</i> regarding if the value that matches or not a given pattern
action.matches_pattern.url_parameters=Frenchyfunc&pageid=Frenchyregular_expressions

parameter.proposed_pattern.label=FrenchyPattern
parameter.proposed_pattern.desc=FrenchyPattern to use

parameter.manual_pattern.label=FrenchyManual pattern
parameter.manual_pattern.desc=FrenchySet your own pattern

choice.[a-z]+=Frenchy[a-z]+ (a word in lowercase)
choice.[A-Z]+=Frenchy[A-Z]+ (a word in uppercase)
choice.[0-9]+=Frenchy[0-9]+ (number)
choice.[a-zA-Z]+=Frenchy[a-zA-Z]+ (any word, case insensitive)
choice.[a-zA-Z0-9]+=Frenchy[a-zA-Z0-9]+ (any literal with alpha-num characters)

#
# contains action
#
action.contains.label=FrenchyContains text
action.contains.desc=FrenchyCheck if the cell contains the specified value

#
# Delete negative values
#
action.delete_negative_values.label=FrenchyDelete the rows with negative values
action.delete_negative_values.desc=FrenchyRows with a negative value in this column will be deleted

#
# Numeric operations
#
action.numeric_ops.label=FrenchyAdd, multiply, subtract or divide
action.numeric_ops.desc=FrenchyPerform an operation/calculation on this column with another one or with a fixed value: Add/sum (+), multiply (x), subtract (-), or divide(/)

parameter.operator.label=FrenchyOperator
parameter.operator.desc=FrenchyOperator to use for this operation

parameter.mode.label=FrenchyUse with
parameter.mode.desc=FrenchySelect if you want to use a value or another column

parameter.operand.label=FrenchyOperand
parameter.operand.desc=FrenchyFixed value to use as operand

#
# Padding
#
action.padding.label=FrenchyAdd extra characters
action.padding.desc=FrenchyAdd extra characters (padding) on the left or on the right of the original value to match an expected size

parameter.size.label=FrenchySize
parameter.size.desc=FrenchyExpected size of the value (values too long will not be truncated)

parameter.padding_char.label=FrenchyAdded character
parameter.padding_char.desc=FrenchyThe character to add

parameter.padding_position.label=FrenchyPosition
parameter.padding_position.desc=FrenchyEither prepend (add on the left) or append (add on the right)

choice.left=FrenchyLeft
choice.right=FrenchyRight

#
# Delete column
#
action.delete_column.label=FrenchyDelete column
action.delete_column.desc=FrenchyDelete this column

#
# Delete single line
#
action.delete_single_line.label=FrenchyDelete row
action.delete_single_line.desc=FrenchyDelete this row

#
# lookup
#
action.lookup.label=FrenchyLookup
action.lookup.desc=FrenchyBlends columns from another dataset into this one

parameter.lookup_ds_name.label=FrenchyLookup dataset name
parameter.lookup_ds_name.desc=FrenchyLookup dataset name

parameter.lookup_ds_id.label=FrenchyLookup dataset id
parameter.lookup_ds_id.desc=FrenchyLookup dataset id

parameter.lookup_ds_url.label=FrenchyLookup dataset URL
parameter.lookup_ds_url.desc=FrenchyLookup dataset URL

parameter.lookup_join_on.label=FrenchyLookup column join
parameter.lookup_join_on.desc=FrenchyLookup column join

parameter.lookup_join_on_name.label=FrenchyLookup column join name
parameter.lookup_join_on_name.desc=FrenchyLookup column join name

parameter.lookup_selected_cols.label=FrenchyLookup selected columns
parameter.lookup_selected_cols.desc=FrenchyLookup selected columns

#
# create new column
#
action.create_new_column.label=FrenchyCreate new column
action.create_new_column.desc=FrenchyCopy a column, or create a brand new one

parameter.mode_new_column.label=FrenchyFill new column with
parameter.mode_new_column.desc=FrenchySelect with which data you new column will be filled with

#
# make this line the header
#
action.make_line_header.label=FrenchyMake as header
action.make_line_header.desc=FrenchyCells of this row will become columns names, the row will be deleted

parameter.make_line_header_skip_until.label=FrenchySkip previous rows
parameter.make_line_header_skip_until.desc=FrenchyPrevious rows will be deleted

#
# change number format
#
action.change_number_format.label=FrenchyFormat numbers
action.change_number_format.desc=FrenchyAllow to format number (decimal, integer & scientific) in a specific format or pattern

parameter.from_separators.label=FrenchyCurrent separators
parameter.from_separators.desc=FrenchyCurrent separators

parameter.from_decimal_separator.label=FrenchyDecimal separator
parameter.from_decimal_separator.desc=FrenchyCharacter used for decimal sign
parameter.from_decimal_separator_custom.label=FrenchyCustom decimal separator
parameter.from_decimal_separator_custom.desc=FrenchyCharacter used for decimal sign

parameter.from_grouping_separator.label=FrenchyGrouping separator
parameter.from_grouping_separator.desc=FrenchyCharacter used for thousands separator
parameter.from_grouping_separator_custom.label=FrenchyCustom grouping separator
parameter.from_grouping_separator_custom.desc=FrenchyCharacter used for thousands separator

parameter.target_pattern.label=FrenchyTarget format
parameter.target_pattern.desc=FrenchyDefine the format to use to format the number

parameter.target_pattern_custom.label=FrenchyCustom target format
parameter.target_pattern_custom.desc=FrenchyDefine the format to use to format the number

parameter.target_decimal_separator.label=FrenchyDecimal separator
parameter.target_decimal_separator.desc=FrenchyCharacter used for decimal sign
parameter.target_decimal_separator_custom.label=FrenchyCustom decimal separator
parameter.target_decimal_separator_custom.desc=FrenchyCharacter used for decimal sign

parameter.target_grouping_separator.label=FrenchyGrouping separator
parameter.target_grouping_separator.desc=FrenchyCharacter used for thousands separator
parameter.target_grouping_separator_custom.label=FrenchyCustom grouping separator
parameter.target_grouping_separator_custom.desc=FrenchyCharacter used for thousands separator

choice.unknown_separators=FrenchyI don''t know, best guess
choice.us_separators=Frenchy1,545.12 (US, UK, China, etc.)
choice.eu_separators=Frenchy1 545,12 (France, Russia, etc.)
choice.ch_separators=Frenchy1''545.12 (Switzerland)

choice.us_pattern=Frenchy1,545.12 (US, UK, China, etc.)
choice.eu_pattern=Frenchy1 545,12 (France, Russia, etc.)
choice.ch_pattern=Frenchy1''545.12 (Switzerland)
choice.scientific=FrenchyScientific

#
# compare numbers
#
action.compare_numbers.label=FrenchyCompare numbers
action.compare_numbers.desc=FrenchyCompare this column to another column or a value

parameter.compare_mode.label=FrenchyCompare mode
parameter.compare_mode.desc=FrenchyChoose your compare mode in this list

parameter.constant_value.label=FrenchyValue
parameter.constant_value.desc=FrenchyValue to compare with

choice.eq=Frenchyequals
choice.ne=Frenchynot equals
choice.gt=Frenchygreater than
choice.ge=Frenchygreater or equals than
choice.lt=Frenchylower than
choice.le=Frenchylower or equals than

#
# Fuzzy matching
#
action.fuzzy_matching.label=FrenchyMatch similar text
action.fuzzy_matching.desc=FrenchyCreate a new column with <i>true</i> or <i>false</i> regarding if the value is less or equals the Levenshtein distance of a given value

parameter.reference_value.label=FrenchyReference
parameter.reference_value.desc=FrenchyThe value to calculate Levenshtein distance with

parameter.sensitivity.label=FrenchyFuzziness
parameter.sensitivity.desc=FrenchyTolerance for the matching (0 means equals, 1 means one characters differs, etc.)

#
# Compare dates
#

action.compare_dates.label=FrenchyCompare dates
action.compare_dates.desc=FrenchyCompare this column to another column or a value

choice.date.eq=Frenchyequals
choice.date.ne=Frenchynot equals
choice.date.gt=Frenchyafter
choice.date.ge=Frenchyafter or equals
choice.date.lt=Frenchybefore
choice.date.le=Frenchybefore or equals

#
# Extract number
#
action.extract_number.label=FrenchyExtract number
action.extract_number.desc=FrenchyExtract number from the input

parameter.decimal_separator.label=FrenchyDecimal separator
parameter.decimal_separator.desc=FrenchyThe decimal separator used in the input

#
# ReorderColumn
#
action.reorder.label=FrenchyReorder columns
action.reorder.desc=FrenchyChange column order

#
# Swap columns
#
action.swap_column.label=FrenchySwap columns
action.swap_column.desc=FrenchySwap the values with an other column

#
# Data masking
#
action.mask_data_by_domain.label=FrenchyMask data (obfuscation)
action.mask_data_by_domain.desc=FrenchyMask data according to the domain information of the column (anonymisation)

#
# Format phone number
#
action.format_phone_number.label=FrenchyFormat phone number
action.format_phone_number.desc=FrenchyFormat a phone number to standard formats

parameter.region_code.label=FrenchyRegion code
parameter.region_code.desc=FrenchyRegion code such as US, UK, FR, DE ...

parameter.format_type.label=FrenchyFormat type
parameter.format_type.desc=FrenchyThe expected phone format such as national, international ...

parameter.manual_region_string.label=FrenchyCustom region code
parameter.manual_region_string.desc=FrenchyRegion code such as US, UK, FR, DE ...

#
# Max
#
action.max_numbers.label=FrenchyMax
action.max_numbers.desc=FrenchyMax with another column or a value

#
# Min
#
action.min_numbers.label=FrenchyMin
action.min_numbers.desc=FrenchyMin with another column or a value

#
# Pow
#
action.pow_numbers.label=FrenchyPower
action.pow_numbers.desc=FrenchyPower with another column or a value

#
# Negate
#
action.negate_numbers.label=FrenchyNegate
action.negate_numbers.desc=FrenchyNegate a column number

#
# SquareRoot
#
action.square_root_numbers.label=FrenchySquare root
action.square_root_numbers.desc=FrenchySquare root of a column number

#
# Exponential
#
action.exponential_numbers.label=FrenchyExponential
action.exponential_numbers.desc=FrenchyExponential of a column number

#
# Logarithm
#
action.logarithm_numbers.label=FrenchyBase 10 logarithm
action.logarithm_numbers.desc=FrenchyCompute the base 10 logarithm from a column

#
# Natural Logarithm
#
action.natural_logarithm_numbers.label=FrenchyNatural logarithm
action.natural_logarithm_numbers.desc=FrenchyCompute the natural logarithm from a column

#
# Cosine
#
action.cos_numbers.label=FrenchyCosine
action.cos_numbers.desc=FrenchyCompute the trigonometric cosine from a column

#
# Sine
#
action.sin_numbers.label=FrenchySine
action.sin_numbers.desc=FrenchyCompute the trigonometric sine from a column

#
# Tangent
#
action.tan_numbers.label=FrenchyTangent
action.tan_numbers.desc=FrenchyCompute the trigonometric tangent from a column

#
# Modify date
#
action.modify_date.label=FrenchyModify date
action.modify_date.desc=FrenchyAdd or substract time unit amount


choice.ISO=FrenchyISO 8601 date
choice.ISO_time=FrenchyISO 8601 date & time

choice.DE=FrenchyGerman standard
choice.DE_time=FrenchyGerman standard with time

choice.JP=FrenchyJapanese standard
choice.JP_time=FrenchyJapanese standard with time

choice.FR=FrenchyFrench standard
choice.FR_time=FrenchyFrench standard with time

choice.US=FrenchyAmerican standard
choice.US_time=FrenchyAmerican standard with time

choice.UK=FrenchyEnglish standard

choice.GB=FrenchyEnglish standard
choice.GB_time=FrenchyEnglish with time

#
# Conversions
#
action.temperatures_converter.label=FrenchyConvert temperature
action.temperatures_converter.desc=FrenchyConverts this column values to another temperature unit
parameter.from_temperature.label=FrenchyFrom
parameter.from_temperature.desc=FrenchyThis column unit
parameter.to_temperature.label=FrenchyTo
parameter.to_temperature.desc=FrenchyTarget conversion unit
choice.Fahrenheit=FrenchyFahrenheit
choice.Celsius=FrenchyCelsius
choice.Kelvin=FrenchyKelvin

#
# trim
#
parameter.padding_character.label=FrenchyPadding character
parameter.padding_character.desc=FrenchyCharacter to remove
parameter.custom_padding_character.label=FrenchyCustom padding character
parameter.custom_padding_character.desc=FrenchySpecify your own custom padding character
choice.whitespace=FrenchyWhitespace

#
# date calendar converter action
#
action.date_calendar_converter.label=FrenchyConvert date
action.date_calendar_converter.desc=FrenchyConvert date from one calendar to another. Available calendars are: Gregorian, Hijri, \
                                    Japanese, Minguo and ThaiBuddhist.
action.date_calendar_converter.url_parameters=Frenchyfunc&pageid=Frenchyconvert_dates
parameter.from_calendar_type.label=FrenchySource calendar
parameter.from_calendar_type.desc=FrenchyThe current date's calendar type
parameter.to_calendar_type.label=FrenchyTarget calendar
parameter.to_calendar_type.desc=FrenchyDefine the new calendar type to use for converting date
choice.IsoChronology=FrenchyGregorian calendar
choice.HijrahChronology=FrenchyHijri calendar
choice.JapaneseChronology=FrenchyJapanese calendar
choice.MinguoChronology=FrenchyMinguo calendar
choice.ThaiBuddhistChronology=FrenchyThaiBuddhist calendar
choice.JulianDay=FrenchyJulian day
choice.ModifiedJulianDay=FrenchyModified Julian day
choice.RataDie=FrenchyRata die
choice.EpochDay=FrenchyEpoch day
choice.datePatternISO=Frenchyyyyy-MM-dd
choice.datePatternUS=FrenchyM/d/yy
choice.datePatternFR=Frenchydd/MM/yy
choice.datePatternDE=Frenchydd.MM.yy
choice.datePatternGB=Frenchydd/MM/yy
choice.datePatternJP=Frenchyyy/MM/dd
choice.datePattern1=Frenchyyyyy/MM/dd
choice.datePattern2=Frenchydd/MM/yyyy
choice.datePattern3=FrenchyMM/dd/yyyy
choice.datePattern4=Frenchyyyyy MM dd
choice.datePattern5=FrenchyyyyyMMdd

#
# Distance converter
#
action.distance_converter.label=FrenchyConvert distance
action.distance_converter.desc=FrenchyConvert distance from one unit to another
parameter.from_unit.label=FrenchyFrom
parameter.from_unit.desc=FrenchyThis column unit
parameter.to_unit.label=FrenchyTo
parameter.to_unit.desc=FrenchyTarget conversion unit
choice.mm=FrenchyMillimeter
choice.cm=FrenchyCentimeter
choice.dm=FrenchyDecimeter
choice.m=FrenchyMeter
choice.dam=FrenchyDekameter
choice.hm=FrenchyHectometer
choice.km=FrenchyKilometer
choice.in=FrenchyInch
choice.ft=FrenchyFoot
choice.yd=FrenchyYard
choice.mi=FrenchyMile
choice.nm=FrenchyNautical mile
choice.ly=FrenchyLight-year

#
# remove consecutive repeated chars
#
action.remove_repeated_chars.label=FrenchyRemove consecutive characters
action.remove_repeated_chars.desc=FrenchyRemove/delete consecutive repeated characters
parameter.remove_type.label=FrenchyRepeated character
parameter.remove_type.desc=FrenchyChoose the type of repeated characters
parameter.custom_repeat_chars.label=FrenchyCustom repeated characters
parameter.custom_repeat_chars.desc=FrenchySpecify your own custom repeated characters

#
# duration converter action
#
action.duration_converter.label=FrenchyConvert duration
action.duration_converter.desc=FrenchyConvert duration from one unit to another
choice.Millis=FrenchyMillisecond
choice.Seconds=FrenchySecond
choice.Minutes=FrenchyMinute
choice.Hours=FrenchyHour
choice.Days=FrenchyDay
choice.Weeks=FrenchyWeek
choice.Months=FrenchyMonth
choice.Years=FrenchyYear

#
# fill empty cell from above
#
action.fill_empty_from_above.label=FrenchyFill empty cells from above
action.fill_empty_from_above.desc=FrenchyFill empty cells with values from previous cell

#
# generate a sequence
#
action.generate_a_sequence.label=FrenchyGenerate sequence
action.generate_a_sequence.desc=FrenchyGenerate a sequence of numeric values
parameter.start_value.label=FrenchyStarting value
parameter.start_value.desc=FrenchyStarting value of the sequence
parameter.step_value.label=FrenchyStep
parameter.step_value.desc=FrenchyStep of each row
